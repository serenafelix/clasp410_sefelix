#!/usr/bin/env python3
"""
This is the code from class to look at permafrost (diffusion equation).
"""

import numpy as np
import matplotlib.pyplot as plt

def solve_heat(xstop = 1, tstop = 0.2, dx = 0.02, dt = 0.0002, c2 = 1, lowerbound=0, upperbound=0):
    """
    A function for solving heat equations
    Parameter:
    c2 : float, c^2, the diffusion coefficient
    Returns:
    x, t = Numpy arrays, the spatial and temporal grids
    U = Numpy array, the solution to the heat equation
    """
    #get grid sizes 
    N = int(tstop/dt)+1
    M = int(xstop/dx)+1
    #set up space and time grid
    t = np.linspace(0, tstop, N)
    x = np.linspace(0, xstop, M)

    # normalize x
    x = x / xstop
    
    #create solution matrix+ set initial conditions
    U = np.zeros([M, N])
    U[:, 0] = 4*x-4*x**2 #initial condition

    #r coeff
    r = c2*dt/dx**2

    # solve the explicit scheme (time-major indexing: U[time, space])
    # enforce simple Dirichlet boundaries (U[:,0] and U[:,-1] remain zero)
    for j in range(N-1):
        U[1:M-1, j+1] = (1-2*r) * U[1:M-1, j] + r*(U[2:M, j] + U[:M-2, j])
         # Apply boundary conditions:
        # Lower boundary
        if lowerbound is None:   # Neumann
            U[0, j+1] = U[1, j+1]
        elif callable(lowerbound):  # Dirichlet/constant
            U[0, j+1] = lowerbound(t[j+1])
        else:
            U[0, j+1] = lowerbound

        # Upper boundary
        if upperbound is None:  # Neumann
            U[-1, j+1] = U[-2, j+1]
        elif callable(upperbound):  # Dirichlet/constant
            U[-1, j+1] = upperbound(t[j+1])
        else:
            U[-1, j+1] = upperbound

    return t, x, U

def plot_heatsolve(t, x, U, title=None, **kwargs):
    """
    Plot the 2D solution for the `solve_heat` function.

    Extra kwargs handed to pcolor.
    """
    if 'cmap' not in kwargs:
        kwargs['cmap'] = 'hot'

    # Create and configure figure & axes:
    fig, ax = plt.subplots(1, 1, figsize=(8, 6))

    # Add contour to our axes:
    contour = ax.pcolor(t, x, U, **kwargs)
    cbar = plt.colorbar(contour)

    # Add labels to stuff!
    cbar.set_label(r'Temperature ($^{\circ}C$)')
    ax.set_xlabel('Time ($s$)')
    ax.set_ylabel('Position ($m$)')
    ax.set_title(title)
    plt.show()

    return fig, ax, cbar

plot_heatsolve(*solve_heat(xstop=100, tstop=100, lowerbound=None, upperbound=None), title='Heat Diffusion Using Neumann Boundary Conditions')